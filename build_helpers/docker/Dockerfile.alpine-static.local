# Elbencho main executable from local source code on Alpine Linux for minimum image size
# This uses mimalloc to overcome the malloc performance issues with musl-libc, which otherwise
# would reduce S3 performance.
#
# Run docker build from elbencho repository root dir like this:
# docker build -t elbencho-local -f build_helpers/docker/Dockerfile.alpine-static.local .
#
# To build and extract a tar file with a static binary, activate the non-default stages like this:
# docker build -t elbencho-local --target export-tar --output type=local,dest=./packaging -f build_helpers/docker/Dockerfile.alpine-static.local .

FROM alpine:3 AS builder

ARG ELBENCHO_MARCH
ARG NUM_JOBS

ENV ELBENCHO_MARCH=${ELBENCHO_MARCH}
ENV NUM_JOBS=${NUM_JOBS}

RUN apk add bash boost-dev build-base gcc g++ git libaio-dev make numactl-dev \
    cmake curl-dev curl-static openssl-libs-static ncurses-static \
    boost-static ncurses zlib-static libretls-static nghttp2-static \
    brotli-static ncurses-dev sudo tar libidn2-static libunistring-static \
    libpsl-static c-ares-dev zstd-static && \
    apk update && apk upgrade

COPY ./ /root/elbencho

RUN cd /root/elbencho && \
    RAM_GB=$(grep MemTotal /proc/meminfo | awk '{printf "%."d"f\n", $2 / 1024 / 1024}') && \
    RAM_GB=$((RAM_GB > 1 ? RAM_GB : 1)) && \
    NUM_JOBS_CALCULATED=$(( $(nproc) > RAM_GB ? RAM_GB : $(nproc) )) && \
    : "${NUM_JOBS:=$NUM_JOBS_CALCULATED}" && \
    echo "NUM_JOBS: $NUM_JOBS." \
        "(NUM_JOBS_CALCULATED: $NUM_JOBS_CALCULATED, RAM_GB: $RAM_GB, nproc: $(nproc))" && \
    DOCKER_BUILD_PLATFORM=$(uname -m) && \
    echo "[PLATFORM] $DOCKER_BUILD_PLATFORM" && \
    make clean-all && \
    if [ ! -z "${ELBENCHO_MARCH}" ]; then \
        echo "[ELBENCHO_MARCH] ${ELBENCHO_MARCH}"; \
        echo -e "#!/bin/sh\n$(which gcc) \"\$@\" -march=${ELBENCHO_MARCH}" > ./gcc-custom; \
        echo -e "#!/bin/sh\n$(which g++) \"\$@\" -march=${ELBENCHO_MARCH}" > ./g++-custom; \
        chmod +x ./gcc-custom ./g++-custom; \
        export CC="$(pwd)/gcc-custom" CXX="$(pwd)/g++-custom"; \
    fi && \
    make -j $(nproc) \
        BACKTRACE_SUPPORT=0 ALTHTTPSVC_SUPPORT=0 S3_SUPPORT=1 \
        S3_AWSCRT=0 USE_MIMALLOC=1 BUILD_STATIC=1 && \
    make install

FROM alpine:3 AS installer

COPY --from=builder /usr/local/bin/elbencho /usr/local/bin

RUN apk add boost-regex boost-program_options libaio libcurl libstdc++ ncurses \
        numactl && \
    ln -s /usr/local/bin/elbencho /usr/bin/elbencho

###### Optional stages start #####
# These stages are specifically to prepare the tar file for extraction

FROM alpine:3 AS prep-extract-tar

COPY --from=builder /usr/local/bin/elbencho /tmp

RUN echo "Preparing tar file for extraction..." && \
    cd /tmp && \
    mkdir export && \
    tar -czf export/elbencho-static-$(uname -m).tar.gz elbencho && \
    ./elbencho --version

FROM scratch AS export-tar

COPY --from=prep-extract-tar /tmp/export/* /

###### Optional stages end #######

FROM installer

RUN /usr/local/bin/elbencho --version

ENTRYPOINT ["/usr/local/bin/elbencho"]
